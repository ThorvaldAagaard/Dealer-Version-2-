
struct handstat {
    int hs_seat ;               /* make it easy to deduce the player given the pointer */
    int hs_length[NSUITS];      /* distribution */
    int hs_points[NSUITS];      /* 4321 HCP per suit */
    int hs_totalpoints;         /* Sum of above hs_points[NSUITS]; */
    int hs_bits;                /* Bitmap to check distribution */
    int hs_loser[NSUITS];       /* Losers in a suit. No half losers e.g. AJT etc as def'd by Blue Team*/
    int hs_totalloser;          /* Losers in the hand */
    int hs_control[NSUITS];     /* Controls in a suit */
    int hs_totalcontrol;        /* Controls in the hand */
    int hs_counts[idxEnd][NSUITS];  /* pt0 thru pt9 & HCP which is a dup of the hs_points array */
    int hs_totalcounts[idxEnd];     /* pt0 thru pt9 & HCP total of all 4 suits */

/*   Next fields added by JGM .... */
    int square_hand ;              /* == 1 for 4333 zero otherwise */
    int hs_ltc[NSUITS];     /* Modern  Losing trick count per suit. Counts in half losers. Values x 100 */
    int hs_totalltc;        /* Total ltc in the hand Counts in half losers. Values x 100 */
    int topcards[NSUITS][3];  /* These are bit masks that allow easy calc of LTC via a switch statement */
    int Has_card[NSUITS][13]; /* CCCC uses cards down to the 8; printoneline and others use hascard a lot.*/

};  /* end struct handstat */
typedef struct handstat HANDSTAT_k ;


/*
 * Minimal set of opc values. Only ones returned by perl program for now; as returned as floats, and as used in pgm
 */
struct opc_Vals_st {          /* The 8 values that the -q OPC report returns as floats. struct filled by scanf */
    /* Since all OPC values can take on either half or sometimes quarter values e.g. Ace=4.5 hcp
     * fscanf returns floating values. We can then convert these to decimal_k (aka int x100) and store in sidestat
     */
    int opc_dealnum ;/* For caching  */
    float DOP[5];    /* Side: opc per strain C, D, H, S, N *OR* Compass: one per compass +1 for side? total */
    float DOP_long ; /* opc in longest fit; usually the max opc; will duplicate one of the above */
    float QL_suit ;  /* Quick Losers. Not strictly opc, tedious to calc and keeps us out of slams off two Aces */
    float QL_nt ;    /* Quick Losers in NT. A stiff is now two losers, not one. */
    int fields ;     /* For Debugging. should be the number of fields returned by dop -q call */
} ;

typedef struct sidestat_st {  /* the floats converted to int x100 for use by this pgm */
    int       ss_cached ;     /* 0 Values for this side are not current; 1 values for this side are current */
    decimal_k ss_opc_hlf_nt;        /* the total opc for the side if playing in NT */
    decimal_k ss_opc_hldf_l;        /*      ditto                            in their longest fit. */
    decimal_k ss_opc_hldf[NSUITS] ; /*      ditto  when each suit is trumps. one will dup the longest fit. */
    decimal_k ss_quick_losers_suit; /* Quick losers for suit play  Total for the side */
    decimal_k ss_quick_losers_nt;   /* Quick losers for nt   play  Total for the side */
} SIDESTAT_k ; /* end struct sidestat */







/* struct for storing cmd line option switches */
struct options_st {
  int       options_error;          //  0 = none. 3= Version Info. 1= Invalid option. 2=Fixed Thread. 4=Usage msg*/
  int       swapping;               // -x 0|2|3 (eXchange) JGM needs 0-9 for scripting parameter passing
  int       progress_meter;         // -m
  int       quiet;                  // -q
  int       upper_case;             // -u default? toggle?
  int       verbose;                // -v   print stats re seed and time taken at end of run
  int       show_version;           // -V
  /* These next options all need  a value */
  int       max_generate;           // -g:
  int       max_produce;            // -p:
  long int  seed;                   // -s:
  long int  seed_provided;
  /* these next ones are by JGM.  */
  char      title[MAXTITLESIZE];    // -T:   descriptive title for the set of hands.(MAXTITLE=100 in docs, 256 in defs)
  size_t    title_len ;
  char      preDeal[4][32] ;        // Predeal Holdings in Dealer fmt Sxxxx,Hxxxxx, etc. -N, -E, -S, -W options
  int       preDeal_len[4] ;        // length of preDeal strings on cmd line.
  int       dbg_lvl;                // -D:  run program with this value of debug verbosity.
  int       srv_dbg_lvl;            //      If usereval forks a server, run server with this value of debug verbosity
  char      rplib_fname[128];       // -L  path to rpdd.zrd db file. ../rpdd.zrd will work.
  long int  rplib_seed;             //     offset in 1000 record incr into the DB. re-use of -s switch.
  int       rplib_mode;             //      zero if not in lib mode; 1 if -L switch
  int       dds_mode ;              // -M  1 Single result mode; 2 all 20 strain-compass combinations; used for par etc.
  char      opc_opener ;            // -O  mostly for OPC; N/E  or W/S; assume W if not set.
  int       opener;                 /*     an int for this pgm since it wants ints for Compass'es */
  int       par_vuln ;              // -P  Set Vuln for Par calcs. 0=None, 1=NS, 2=EW, 3=Both. Then converted to DDS coding.
  int       nThreads ;              // -R  Resource set nThreads 0..9; maxRamMB = nThreads*160MB
  int       maxRamMB ;              //     Calc'ed by pgm once nThreads are set.
  char      ex_fname[128] ;         // -X  Filename used for exporting ; opens FILE *fexp global var
  char      csv_fname[128];         // -C  Filename used for CSV report; if w:<fname> opens for write. else for append
  char      csv_fmode[8];
  char      userpgm[256]  ;         // -U   Path of the User provided external server executable. Default=UserServer ROOT Dir.
} ;   /* end options_st */
